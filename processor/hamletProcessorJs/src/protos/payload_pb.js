/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var rule_pb = require('./rule_pb.js');
goog.exportSymbol('proto.AcceptOffer', null, global);
goog.exportSymbol('proto.CloseOffer', null, global);
goog.exportSymbol('proto.CreateAccount', null, global);
goog.exportSymbol('proto.CreateAsset', null, global);
goog.exportSymbol('proto.CreateHolding', null, global);
goog.exportSymbol('proto.CreateOffer', null, global);
goog.exportSymbol('proto.TransactionPayload', null, global);
goog.exportSymbol('proto.TransactionPayload.PayloadType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TransactionPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TransactionPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TransactionPayload.displayName = 'proto.TransactionPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TransactionPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.TransactionPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TransactionPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloadType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    createAccount: (f = msg.getCreateAccount()) && proto.CreateAccount.toObject(includeInstance, f),
    createAsset: (f = msg.getCreateAsset()) && proto.CreateAsset.toObject(includeInstance, f),
    createHolding: (f = msg.getCreateHolding()) && proto.CreateHolding.toObject(includeInstance, f),
    createOffer: (f = msg.getCreateOffer()) && proto.CreateOffer.toObject(includeInstance, f),
    acceptOffer: (f = msg.getAcceptOffer()) && proto.AcceptOffer.toObject(includeInstance, f),
    closeOffer: (f = msg.getCloseOffer()) && proto.CloseOffer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TransactionPayload}
 */
proto.TransactionPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TransactionPayload;
  return proto.TransactionPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TransactionPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TransactionPayload}
 */
proto.TransactionPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.TransactionPayload.PayloadType} */ (reader.readEnum());
      msg.setPayloadType(value);
      break;
    case 2:
      var value = new proto.CreateAccount;
      reader.readMessage(value,proto.CreateAccount.deserializeBinaryFromReader);
      msg.setCreateAccount(value);
      break;
    case 3:
      var value = new proto.CreateAsset;
      reader.readMessage(value,proto.CreateAsset.deserializeBinaryFromReader);
      msg.setCreateAsset(value);
      break;
    case 4:
      var value = new proto.CreateHolding;
      reader.readMessage(value,proto.CreateHolding.deserializeBinaryFromReader);
      msg.setCreateHolding(value);
      break;
    case 5:
      var value = new proto.CreateOffer;
      reader.readMessage(value,proto.CreateOffer.deserializeBinaryFromReader);
      msg.setCreateOffer(value);
      break;
    case 10:
      var value = new proto.AcceptOffer;
      reader.readMessage(value,proto.AcceptOffer.deserializeBinaryFromReader);
      msg.setAcceptOffer(value);
      break;
    case 11:
      var value = new proto.CloseOffer;
      reader.readMessage(value,proto.CloseOffer.deserializeBinaryFromReader);
      msg.setCloseOffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TransactionPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TransactionPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TransactionPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TransactionPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayloadType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCreateAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CreateAccount.serializeBinaryToWriter
    );
  }
  f = message.getCreateAsset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CreateAsset.serializeBinaryToWriter
    );
  }
  f = message.getCreateHolding();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.CreateHolding.serializeBinaryToWriter
    );
  }
  f = message.getCreateOffer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.CreateOffer.serializeBinaryToWriter
    );
  }
  f = message.getAcceptOffer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.AcceptOffer.serializeBinaryToWriter
    );
  }
  f = message.getCloseOffer();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.CloseOffer.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.TransactionPayload.PayloadType = {
  TYPE_UNSET: 0,
  CREATE_ACCOUNT: 2,
  CREATE_ASSET: 3,
  CREATE_HOLDING: 4,
  CREATE_OFFER: 5,
  ACCEPT_OFFER: 10,
  CLOSE_OFFER: 11
};

/**
 * optional PayloadType payload_type = 1;
 * @return {!proto.TransactionPayload.PayloadType}
 */
proto.TransactionPayload.prototype.getPayloadType = function() {
  return /** @type {!proto.TransactionPayload.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.TransactionPayload.PayloadType} value */
proto.TransactionPayload.prototype.setPayloadType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CreateAccount create_account = 2;
 * @return {?proto.CreateAccount}
 */
proto.TransactionPayload.prototype.getCreateAccount = function() {
  return /** @type{?proto.CreateAccount} */ (
    jspb.Message.getWrapperField(this, proto.CreateAccount, 2));
};


/** @param {?proto.CreateAccount|undefined} value */
proto.TransactionPayload.prototype.setCreateAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TransactionPayload.prototype.clearCreateAccount = function() {
  this.setCreateAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionPayload.prototype.hasCreateAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CreateAsset create_asset = 3;
 * @return {?proto.CreateAsset}
 */
proto.TransactionPayload.prototype.getCreateAsset = function() {
  return /** @type{?proto.CreateAsset} */ (
    jspb.Message.getWrapperField(this, proto.CreateAsset, 3));
};


/** @param {?proto.CreateAsset|undefined} value */
proto.TransactionPayload.prototype.setCreateAsset = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TransactionPayload.prototype.clearCreateAsset = function() {
  this.setCreateAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionPayload.prototype.hasCreateAsset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CreateHolding create_holding = 4;
 * @return {?proto.CreateHolding}
 */
proto.TransactionPayload.prototype.getCreateHolding = function() {
  return /** @type{?proto.CreateHolding} */ (
    jspb.Message.getWrapperField(this, proto.CreateHolding, 4));
};


/** @param {?proto.CreateHolding|undefined} value */
proto.TransactionPayload.prototype.setCreateHolding = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.TransactionPayload.prototype.clearCreateHolding = function() {
  this.setCreateHolding(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionPayload.prototype.hasCreateHolding = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CreateOffer create_offer = 5;
 * @return {?proto.CreateOffer}
 */
proto.TransactionPayload.prototype.getCreateOffer = function() {
  return /** @type{?proto.CreateOffer} */ (
    jspb.Message.getWrapperField(this, proto.CreateOffer, 5));
};


/** @param {?proto.CreateOffer|undefined} value */
proto.TransactionPayload.prototype.setCreateOffer = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TransactionPayload.prototype.clearCreateOffer = function() {
  this.setCreateOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionPayload.prototype.hasCreateOffer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AcceptOffer accept_offer = 10;
 * @return {?proto.AcceptOffer}
 */
proto.TransactionPayload.prototype.getAcceptOffer = function() {
  return /** @type{?proto.AcceptOffer} */ (
    jspb.Message.getWrapperField(this, proto.AcceptOffer, 10));
};


/** @param {?proto.AcceptOffer|undefined} value */
proto.TransactionPayload.prototype.setAcceptOffer = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.TransactionPayload.prototype.clearAcceptOffer = function() {
  this.setAcceptOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionPayload.prototype.hasAcceptOffer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional CloseOffer close_offer = 11;
 * @return {?proto.CloseOffer}
 */
proto.TransactionPayload.prototype.getCloseOffer = function() {
  return /** @type{?proto.CloseOffer} */ (
    jspb.Message.getWrapperField(this, proto.CloseOffer, 11));
};


/** @param {?proto.CloseOffer|undefined} value */
proto.TransactionPayload.prototype.setCloseOffer = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.TransactionPayload.prototype.clearCloseOffer = function() {
  this.setCloseOffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TransactionPayload.prototype.hasCloseOffer = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateAccount.displayName = 'proto.CreateAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateAccount}
 */
proto.CreateAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateAccount;
  return proto.CreateAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateAccount}
 */
proto.CreateAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.CreateAccount.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateAccount.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.CreateAccount.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateAccount.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateAsset.repeatedFields_, null);
};
goog.inherits(proto.CreateAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateAsset.displayName = 'proto.CreateAsset';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateAsset.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    rule_pb.Rule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateAsset}
 */
proto.CreateAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateAsset;
  return proto.CreateAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateAsset}
 */
proto.CreateAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new rule_pb.Rule;
      reader.readMessage(value,rule_pb.Rule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      rule_pb.Rule.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.CreateAsset.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateAsset.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.CreateAsset.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateAsset.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Rule rules = 3;
 * @return {!Array<!proto.Rule>}
 */
proto.CreateAsset.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.Rule>} */ (
    jspb.Message.getRepeatedWrapperField(this, rule_pb.Rule, 3));
};


/** @param {!Array<!proto.Rule>} value */
proto.CreateAsset.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Rule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Rule}
 */
proto.CreateAsset.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Rule, opt_index);
};


proto.CreateAsset.prototype.clearRulesList = function() {
  this.setRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateHolding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CreateHolding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateHolding.displayName = 'proto.CreateHolding';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateHolding.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateHolding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateHolding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateHolding.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    asset: jspb.Message.getFieldWithDefault(msg, 4, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateHolding}
 */
proto.CreateHolding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateHolding;
  return proto.CreateHolding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateHolding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateHolding}
 */
proto.CreateHolding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateHolding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateHolding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateHolding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateHolding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAsset();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeSint64(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.CreateHolding.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateHolding.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.CreateHolding.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateHolding.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.CreateHolding.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CreateHolding.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string asset = 4;
 * @return {string}
 */
proto.CreateHolding.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CreateHolding.prototype.setAsset = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional sint64 quantity = 5;
 * @return {number}
 */
proto.CreateHolding.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CreateHolding.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CreateOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CreateOffer.repeatedFields_, null);
};
goog.inherits(proto.CreateOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CreateOffer.displayName = 'proto.CreateOffer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CreateOffer.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CreateOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.CreateOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CreateOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    source: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sourceQuantity: jspb.Message.getFieldWithDefault(msg, 5, 0),
    target: jspb.Message.getFieldWithDefault(msg, 6, ""),
    targetQuantity: jspb.Message.getFieldWithDefault(msg, 7, 0),
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    rule_pb.Rule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CreateOffer}
 */
proto.CreateOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CreateOffer;
  return proto.CreateOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CreateOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CreateOffer}
 */
proto.CreateOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSourceQuantity(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTargetQuantity(value);
      break;
    case 8:
      var value = new rule_pb.Rule;
      reader.readMessage(value,rule_pb.Rule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CreateOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CreateOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CreateOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CreateOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSourceQuantity();
  if (f !== 0) {
    writer.writeSint64(
      5,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTargetQuantity();
  if (f !== 0) {
    writer.writeSint64(
      7,
      f
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      rule_pb.Rule.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.CreateOffer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CreateOffer.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.CreateOffer.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CreateOffer.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.CreateOffer.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CreateOffer.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.CreateOffer.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.CreateOffer.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional sint64 source_quantity = 5;
 * @return {number}
 */
proto.CreateOffer.prototype.getSourceQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CreateOffer.prototype.setSourceQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string target = 6;
 * @return {string}
 */
proto.CreateOffer.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.CreateOffer.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional sint64 target_quantity = 7;
 * @return {number}
 */
proto.CreateOffer.prototype.getTargetQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.CreateOffer.prototype.setTargetQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated Rule rules = 8;
 * @return {!Array<!proto.Rule>}
 */
proto.CreateOffer.prototype.getRulesList = function() {
  return /** @type{!Array<!proto.Rule>} */ (
    jspb.Message.getRepeatedWrapperField(this, rule_pb.Rule, 8));
};


/** @param {!Array<!proto.Rule>} value */
proto.CreateOffer.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.Rule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Rule}
 */
proto.CreateOffer.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.Rule, opt_index);
};


proto.CreateOffer.prototype.clearRulesList = function() {
  this.setRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AcceptOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AcceptOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AcceptOffer.displayName = 'proto.AcceptOffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AcceptOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.AcceptOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AcceptOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AcceptOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    target: jspb.Message.getFieldWithDefault(msg, 3, ""),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AcceptOffer}
 */
proto.AcceptOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AcceptOffer;
  return proto.AcceptOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AcceptOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AcceptOffer}
 */
proto.AcceptOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AcceptOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AcceptOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AcceptOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AcceptOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.AcceptOffer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AcceptOffer.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.AcceptOffer.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AcceptOffer.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string target = 3;
 * @return {string}
 */
proto.AcceptOffer.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.AcceptOffer.prototype.setTarget = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 count = 4;
 * @return {number}
 */
proto.AcceptOffer.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.AcceptOffer.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CloseOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CloseOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CloseOffer.displayName = 'proto.CloseOffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CloseOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.CloseOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CloseOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloseOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CloseOffer}
 */
proto.CloseOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CloseOffer;
  return proto.CloseOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CloseOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CloseOffer}
 */
proto.CloseOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CloseOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CloseOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CloseOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CloseOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.CloseOffer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CloseOffer.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto);
